// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Photo {
  id            String  @id @default(cuid())
  filename      String? 
  
  // Cloudinary specific
  publicID      String   @unique
  assetID       String   @unique
  url           String
  secureURL     String
  
  // Date and time
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Basic metadata
  title         String
  caption       String?
  tags          String[]
  isPublic      Boolean  @default(true)
  filmPhoto     Boolean  @default(false)
  width         Int
  height        Int
  fileSize      Float?
  mimeType      String?

  // Location
  latitude      Float?
  longitude     Float?
  location      String?

  // Relations
  exifData      ExifData?
  fujiData      FujifilmData?
  // collections   Collection[] @relation("PhotoCollections")
  // PhotoCollections PhotoCollections[] @relation("PhotoCollections")
  
  @@index([createdAt])
  @@index([isPublic])  
  
}

model ExifData {
  photoID       String   @id 
  photo         Photo    @relation(fields: [photoID], references: [id], onDelete: Cascade)

  // Camera info
  make          String?
  model         String?
  lens          String?

  // Exposure settings
  shutterSpeed  String?
  aperture      Float?
  iso           Int?
  focalLength   String?
  exposureComp  Float?

  // Other
  dateTaken     DateTime?
  orientation   String?
  flash         String?
  whiteBalance  String?
  meteringMode  String?
  exposureMode  String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FujifilmData {

  photoID       String    @id
  photo         Photo     @relation(fields: [photoID], references: [id], onDelete: Cascade)

  // https://exiftool.org/TagNames/FujiFilm.html
  filmMode                String?       // 0x1401
  grainEffectRoughness    String?       // 0x1047
  grainEffectSize         String?       // 0x104C
  colorChromeEffect       String?       // 0x1048
  colorChromeFXBlue       String?       // 0x104E
  whiteBalance            String?       // 0x1002
  whiteBalanceFineTune    String?       // 0x100A
  colorTemperature        String?       // 0x1005
  dynamicRangeSetting     String?       // 0x1402
  developmentDynamicRange String?       // 0x1403
  highlightTone           String?       // 0x1041
  shadowTone              String?       // 0x1040
  color                   String?       // 0x1003
  sharpness               String?       // 0x1001
  noiseReduction          String?       // 0x100E
  clarity                 String?       // 0x100F

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FujifilmRecipes {
  id                      String  @id @default(cuid())
  recipeName              String

  filmSim                 String
  colorTemperature        String  @default("auto")
  developmentDynamicRange String
  whiteBalanceFineTune    String
  noiseReduction          String
  highlightTone           String
  shadowTone              String
  color                   String
  sharpness               String
  clarity                 String
  colorChromeEffect       String
  colorChromeFXBlue       String
  grainEffectSize         String
  grainEffectRoughness    String

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

// model Collection {
//   id            String  @id @default(cuid())
//   name          String
//   slug          String   @unique
//   description   String?
//   coverPhotoID  String?

//   photos        Photo[]  @relation("PhotoCollections")
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   PhotoCollections PhotoCollections[]
// }

// model PhotoCollections {
//   photo        Photo      @relation("PhotoCollections", fields: [photoId], references: [id])
//   photoId      String
//   collection   Collection @relation(fields: [collectionId], references: [id])
//   collectionId String
//   @@id([photoId, collectionId])  
// }

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
